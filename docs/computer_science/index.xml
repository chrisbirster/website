<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Chris Birster</title>
    <link>https://chrisbirster.com/computer_science/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
        <atom:link href="https://chrisbirster.com/computer_science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bubble Sort</title>
      <link>https://chrisbirster.com/computer_science/algorithms/bubble_sort/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisbirster.com/computer_science/algorithms/bubble_sort/</guid>
      <description> Create A Sequence unsorted_list = [8,5,3,6,2,1,9,4,7] unsorted_list [8, 5, 3, 6, 2, 1, 9, 4, 7]  Create A Bubble Sort Function # Define a function that takes an unsorted sequence def bubble_sort(unsorted_list): # Create a new list containing the values from the inputed list sequence = unsorted_list[:] # For each value of the sequence (epochs), for i, _ in enumerate(sequence): # For each value of the sequence, for i, _ in enumerate(sequence): # Try try: # If a value is greater than the value that follows it if sequence[i] &amp;gt; sequence[i+1]: # Swap the values in the sequence sequence[i], sequence[i+1] = sequence[i+1], sequence[i] # If you raise an index error, you are at the end of the sequence, except IndexError: # So ignore the error and continue with iteration continue # Print the sequence afer each epoch print(sequence)# Run the function bubble_sort(unsorted_list) [5, 3, 6, 2, 1, 8, 4, 7, 9] [3, 5, 2, 1, 6, 4, 7, 8, 9] [3, 2, 1, 5, 4, 6, 7, 8, 9] [2, 1, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9]  </description>
    </item>
    
    <item>
      <title>Insertion Sort</title>
      <link>https://chrisbirster.com/computer_science/algorithms/insertion_sort/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisbirster.com/computer_science/algorithms/insertion_sort/</guid>
      <description> Create A Sequence alist = [8,5,3,6,2,1,9,4,7] alist [8, 5, 3, 6, 2, 1, 9, 4, 7]  Create A Selection Sort Algorithm # Define an function that takes a list def insertion_sort(alist): # Create a sequence from the argument list sequence = alist[:] # Get the length of the list n = len(sequence) # For 1 through the length for the sequence: for i in range(1, n): # save the value of the card value = sequence[i] # save the current position of the card position = i # while the card is not the first card and is smaller than the card to it&amp;#39;s left: while position &amp;gt; 0 and value &amp;lt; sequence[position - 1]: # the card overwrites the card to the left sequence[position] = sequence[position - 1] # And we move on to the next position position -= 1 # When we have found the right position (meaning the while loop is false) # put the card in its correct spot in the deck sequence[position] = value # View the deck so far print(sequence)# Run the sort insertion_sort(alist) [5, 8, 3, 6, 2, 1, 9, 4, 7] [3, 5, 8, 6, 2, 1, 9, 4, 7] [3, 5, 6, 8, 2, 1, 9, 4, 7] [2, 3, 5, 6, 8, 1, 9, 4, 7] [1, 2, 3, 5, 6, 8, 9, 4, 7] [1, 2, 3, 5, 6, 8, 9, 4, 7] [1, 2, 3, 4, 5, 6, 8, 9, 7] [1, 2, 3, 4, 5, 6, 7, 8, 9]  </description>
    </item>
    
  </channel>
</rss>